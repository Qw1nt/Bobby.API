using Application.Common.Interfaces;
using Mediator;
using Microsoft.EntityFrameworkCore;

namespace Application.UnityWorlds.Commands.AddExploitationTime;

public record AddExploitationTimeCommand(int UnityWorldId, TimeSpan Time) : IRequest<bool>;

public class AddExploitationTimeCommandHandler : IRequestHandler<AddExploitationTimeCommand, bool>
{
    private readonly IApplicationDataContext _applicationDataContext;

    public AddExploitationTimeCommandHandler(IApplicationDataContext applicationDataContext)
    {
        _applicationDataContext = applicationDataContext;
    }

    public async ValueTask<bool> Handle(AddExploitationTimeCommand request, CancellationToken cancellationToken)
    {
        var world = await _applicationDataContext.UnityWorlds
            .FirstOrDefaultAsync(x => x.Id == request.UnityWorldId, cancellationToken: cancellationToken);

        if (world == null)
            return false;
        
        world.ExploitationTime += request.Time;
        
        _applicationDataContext.UnityWorlds.Update(world);
        await _applicationDataContext.SaveChangesAsync(cancellationToken);
        
        return true;
    }
}